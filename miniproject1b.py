# -*- coding: utf-8 -*-
"""MiniProject1b

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LRti43-sAowYnggo-S5u9xW6Zi7O514R

Download the Dataset
Download the dataset from the following link:
https://www.kaggle.com/martj42/international-football-results-from-1872-to-2017
Download the dataset to your local computer in the project directory of your choice.

Reading the Dataset
Read the dataset into the Pandas DataFrame!
Does the dataset include any missing values? If so, delete the missing values entries!
Hint: Pandas can do that with one line of code!
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd 
import os
import numpy as np 

football = pd.read_csv('football.csv')
football

#checking missing values
football.isnull()
football.isnull().sum(axis = 0)

"""Exploring the Dataset
Answer the following questions about the dataset using Python commands:
How many tuples are there in the dataset?
How many tournaments are there in the dataset?
Hint: Each question should require few lines of code!
"""

#Step 3
#how many tuple are there
football.shape

#How many unique tournaments are there in the dataset?
unique_tournaments = football["tournament"].unique()
print(unique_tournaments)
len(unique_tournaments)

"""Convert and Deduce
Convert the column date to timestamps!
Find out how many matches in the dataset were played in 2018.
Hint: Use the date column.
"""

#Convert the column date to timestamps
pd.to_datetime(football.date)

#Find out how many matches in the dataset were played in 2018.
football['year'] = pd.DatetimeIndex(football['date']).year
football.loc[football['year'] == 2018].shape[0]

"""Team Statistics
Calculate how many times the home team won, lost or had a draw.
"""

#Calculate how many times the home team won, lost or had a draw
#Win
win = football.loc[football['home_score'] > football['away_score'] ].shape[0]
win

#Lost
lost = football.loc[football['home_score'] < football['away_score'] ].shape[0]
lost

#Draw
draw = football.loc[football['home_score'] == football['away_score'] ].shape[0]
draw

"""Visualization
Plot the numbers extracted from step 5 in a pie chart.
Plot the neutral column as a pie chart.
Hint: Try to Visualize the neutral column Using Pandas (Only one line of code).
"""

#Visualizzation
#Pie Chart

import matplotlib.pyplot as plt



# create figure and axis
#figure, axis = plt.subplots()
games = [ win, lost, draw]
labels =['won', 'lost', 'draw']
plt.pie(games, labels = labels,  autopct='%1.2f%%')
plt.show()

#Plot the neutral column as a pie chart
unique_labels = football["neutral"].unique()
print(unique_labels)

neutral_false = football.loc[football['neutral'] == False ].shape[0]
neutral_true =  football.loc[football['neutral'] == True ].shape[0]
neutral = [neutral_false, neutral_true]
print(neutral)

plt.pie(neutral, labels = unique_labels,  autopct='%1.2f%%')
plt.show()

"""Unique teams
How many unique teams are there in the dataset? Find out!
"""

#How many unique teams are there in the dataset?
values = football[["home_team", "away_team"]].values
len(np.unique(values))